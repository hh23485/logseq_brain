{:highlights [{:id #uuid "63cbfea4-bfbf-472b-a535-a2176766691c", :page 16, :position {:bounding {:x1 0, :y1 -3.428558349609375, :x2 674.9064047634602, :y2 204.57144165039062, :width 837, :height 1083.1764705882354}, :rects ({:x1 0, :y1 -3.428558349609375, :x2 0, :y2 19.4285888671875, :width 837, :height 1083.1764705882354} {:x1 105.29464939236641, :y1 107.47323608398438, :x2 674.9064047634602, :y2 149.18753051757812, :width 837, :height 1083.1764705882354} {:x1 105.29464939236641, :y1 162.85714721679688, :x2 483.18008640408516, :y2 204.57144165039062, :width 837, :height 1083.1764705882354}), :page 16}, :content {:text "Chapter 1. Systems Programmers Can Have Nice Things"}, :properties {:color "yellow"}} {:id #uuid "63cbfebe-4697-429c-aa0a-2b9c042e2b61", :page 17, :position {:bounding {:x1 104, :y1 97.142578125, :x2 730, :y2 281.142578125, :width 837, :height 1083.1764705882354}, :rects (), :page 17}, :content {:text "[:span]", :image 1674313404809}, :properties {:color "yellow"}} {:id #uuid "63cbfece-746a-41f3-b177-e5b074943c60", :page 17, :position {:bounding {:x1 0, :y1 124.5714340209961, :x2 706.1356985867023, :y2 700.8303985595703, :width 837, :height 1083.1764705882354}, :rects ({:x1 0, :y1 124.5714340209961, :x2 0, :y2 147.42858123779297, :width 837, :height 1083.1764705882354} {:x1 0, :y1 140.5714340209961, :x2 0, :y2 163.42858123779297, :width 837, :height 1083.1764705882354} {:x1 337.0639517605305, :y1 606.1696624755859, :x2 706.1356985867023, :y2 629.5982208251953, :width 837, :height 1083.1764705882354} {:x1 105.29464939236641, :y1 642.0714569091797, :x2 687.7629568874836, :y2 665.5000152587891, :width 837, :height 1083.1764705882354} {:x1 105.29464939236641, :y1 677.9732513427734, :x2 386.2794668972492, :y2 700.8303985595703, :width 837, :height 1083.1764705882354}), :page 17}, :content {:text "The array a is only one element long, so using a[3] is, according to the C programming language standard, undefined behavior"}, :properties {:color "yellow"}} {:id #uuid "63cbff28-fb20-47a4-a81c-5942a86c3fb7", :page 17, :position {:bounding {:x1 0, :y1 172.57143783569336, :x2 696.2246878445148, :y2 833.1518402099609, :width 837, :height 1083.1764705882354}, :rects ({:x1 0, :y1 172.57143783569336, :x2 0, :y2 195.42858123779297, :width 837, :height 1083.1764705882354} {:x1 0, :y1 188.57143783569336, :x2 0, :y2 211.4285831451416, :width 837, :height 1083.1764705882354} {:x1 129.91072300076485, :y1 738.4911346435547, :x2 691.5980398952961, :y2 761.3482513427734, :width 837, :height 1083.1764705882354} {:x1 129.91072300076485, :y1 774.3928680419922, :x2 696.2246878445148, :y2 797.2500457763672, :width 837, :height 1083.1764705882354} {:x1 129.91072300076485, :y1 810.2946624755859, :x2 461.60896518826485, :y2 833.1518402099609, :width 837, :height 1083.1764705882354}), :page 17}, :content {:text "Behavior, upon use of a nonportable or erroneous program construct or of erroneous data, for which this International Standard imposes no requirements"}, :properties {:color "yellow"}} {:id #uuid "63cbff30-fb9f-4be1-92ff-8184591cff22", :page 17, :position {:bounding {:x1 0, :y1 220.57144165039062, :x2 710.6945517361164, :y2 965.4643249511719, :width 837, :height 1083.1764705882354}, :rects ({:x1 0, :y1 220.57144165039062, :x2 0, :y2 243.4285888671875, :width 837, :height 1083.1764705882354} {:x1 0, :y1 236.57144165039062, :x2 0, :y2 259.4285888671875, :width 837, :height 1083.1764705882354} {:x1 105.29464939236641, :y1 870.8125305175781, :x2 710.6945517361164, :y2 893.669677734375, :width 837, :height 1083.1764705882354} {:x1 105.29464939236641, :y1 906.7054138183594, :x2 701.8654349148273, :y2 929.5625305175781, :width 837, :height 1083.1764705882354} {:x1 105.29464939236641, :y1 942.607177734375, :x2 129.6562216579914, :y2 965.4643249511719, :width 837, :height 1083.1764705882354}), :page 17}, :content {:text "Undefined behavior doesn’t just have an unpredictable result: the standard explicitly permits the program to do anything at all"}, :properties {:color "yellow"}} {:id #uuid "63cbff47-ba84-4a64-bdcc-5f2ba20a1449", :page 18, :position {:bounding {:x1 0, :y1 92.57143115997314, :x2 663.9726889431477, :y2 404.39288806915283, :width 837, :height 1083.1764705882354}, :rects ({:x1 0, :y1 92.57143115997314, :x2 0, :y2 115.42857837677002, :width 837, :height 1083.1764705882354} {:x1 105.29464939236641, :y1 345.6339464187622, :x2 663.9726889431477, :y2 368.4910936355591, :width 837, :height 1083.1764705882354} {:x1 105.29464939236641, :y1 381.53574085235596, :x2 188.42979648709297, :y2 404.39288806915283, :width 837, :height 1083.1764705882354}), :page 18}, :content {:text "C and C++ have hundreds of rules for avoiding undefined behavior"}, :properties {:color "yellow"}} {:id #uuid "63cbff4e-e3d2-4bc0-97ca-24fddbe543f8", :page 18, :position {:bounding {:x1 0, :y1 108.5714316368103, :x2 714.5181143581867, :y2 476.18750762939453, :width 837, :height 1083.1764705882354}, :rects ({:x1 0, :y1 108.5714316368103, :x2 0, :y2 131.4285750389099, :width 837, :height 1083.1764705882354} {:x1 0, :y1 124.57143211364746, :x2 0, :y2 147.4285774230957, :width 837, :height 1083.1764705882354} {:x1 200.05107334256172, :y1 381.5357437133789, :x2 714.5181143581867, :y2 404.39286041259766, :width 837, :height 1083.1764705882354} {:x1 105.29464939236641, :y1 417.43750762939453, :x2 698.3351767361164, :y2 440.2946548461914, :width 837, :height 1083.1764705882354} {:x1 105.29464939236641, :y1 453.33036041259766, :x2 348.6541006863117, :y2 476.18750762939453, :width 837, :height 1083.1764705882354}), :page 18}, :content {:text "They’re mostly common sense: don’t access memory you shouldn’t, don’t let arithmetic operations overflow, don’t divide by zero, and so on"}, :properties {:color "yellow"}} {:id #uuid "63cbff6f-fb28-4b17-88e0-dd2932bd5af1", :page 18, :position {:bounding {:x1 0, :y1 172.57143783569336, :x2 707.6246054470539, :y2 619.7946624755859, :width 837, :height 1083.1764705882354}, :rects ({:x1 0, :y1 172.57143783569336, :x2 0, :y2 195.42858123779297, :width 837, :height 1083.1764705882354} {:x1 0, :y1 188.57143783569336, :x2 0, :y2 211.4285831451416, :width 837, :height 1083.1764705882354} {:x1 207.93652561306953, :y1 525.1339569091797, :x2 689.807985574007, :y2 547.9911041259766, :width 837, :height 1083.1764705882354} {:x1 105.29464939236641, :y1 561.0357513427734, :x2 707.6246054470539, :y2 583.8928985595703, :width 837, :height 1083.1764705882354} {:x1 105.29464939236641, :y1 596.9375152587891, :x2 571.5148032009602, :y2 619.7946624755859, :width 837, :height 1083.1764705882354}), :page 18}, :content {:text " Indeed, the preceding program compiles without errors or warnings. The responsibility for avoiding undefined behavior falls entirely on you, the programmer."}, :properties {:color "yellow"}} {:id #uuid "63cbfff9-be9f-4f73-9cf8-48aaf16d572a", :page 18, :position {:bounding {:x1 0, :y1 284.5714416503906, :x2 728.0284140408039, :y2 967.5179138183594, :width 837, :height 1083.1764705882354}, :rects ({:x1 0, :y1 284.5714416503906, :x2 0, :y2 307.4285888671875, :width 837, :height 1083.1764705882354} {:x1 0, :y1 300.5714416503906, :x2 0, :y2 323.4285888671875, :width 837, :height 1083.1764705882354} {:x1 0, :y1 316.5714416503906, :x2 0, :y2 339.4285888671875, :width 837, :height 1083.1764705882354} {:x1 0, :y1 332.5714416503906, :x2 0, :y2 355.4285888671875, :width 837, :height 1083.1764705882354} {:x1 471.14607456326485, :y1 801.0625305175781, :x2 705.4611380398273, :y2 823.919677734375, :width 837, :height 1083.1764705882354} {:x1 105.29464939236641, :y1 836.9553833007812, :x2 719.2648642361164, :y2 859.8125305175781, :width 837, :height 1083.1764705882354} {:x1 105.29464939236641, :y1 872.857177734375, :x2 719.9339316189289, :y2 895.7143249511719, :width 837, :height 1083.1764705882354} {:x1 105.29464939236641, :y1 908.7589721679688, :x2 728.0284140408039, :y2 931.6161193847656, :width 837, :height 1083.1764705882354} {:x1 105.29464939236641, :y1 944.6607666015625, :x2 588.0267660915852, :y2 967.5179138183594, :width 837, :height 1083.1764705882354}), :page 18}, :content {:text "He found that nearly all programs do, including those from well-respected projects that hold their code to high standards. Assuming that you can avoid undefined behavior in C and C++ is like assuming you can win a game of chess simply because you know the rules"}, :properties {:color "yellow"}} {:id #uuid "63cc004e-c940-4ebb-9242-75d10e8ffdc3", :page 20, :position {:bounding {:x1 0, :y1 28.571426391601562, :x2 693.2962363064289, :y2 296.6875305175781, :width 837, :height 1083.1764705882354}, :rects ({:x1 0, :y1 28.571426391601562, :x2 0, :y2 51.42857360839844, :width 837, :height 1083.1764705882354} {:x1 0, :y1 44.57142639160156, :x2 0, :y2 67.42857360839844, :width 837, :height 1083.1764705882354} {:x1 105.29464939236641, :y1 202.02679443359375, :x2 644.0093100368977, :y2 224.88394165039062, :width 837, :height 1083.1764705882354} {:x1 105.29464939236641, :y1 237.9285888671875, :x2 693.2962363064289, :y2 260.7857360839844, :width 837, :height 1083.1764705882354} {:x1 105.29464939236641, :y1 273.83038330078125, :x2 189.74664524197578, :y2 296.6875305175781, :width 837, :height 1083.1764705882354}), :page 20}, :content {:text "The Rust language makes you a simple promise: if your program passes the compiler’s checks, it is free of undefined behavior"}, :properties {:color "yellow"}} {:id #uuid "63cc0058-1075-47ea-8eee-a848a246fa94", :page 20, :position {:bounding {:x1 0, :y1 60.57142639160156, :x2 680.8000510036945, :y2 332.58929443359375, :width 837, :height 1083.1764705882354}, :rects ({:x1 0, :y1 60.57142639160156, :x2 0, :y2 83.42857360839844, :width 837, :height 1083.1764705882354} {:x1 202.00030735135078, :y1 273.83038330078125, :x2 680.8000510036945, :y2 296.6875, :width 837, :height 1083.1764705882354} {:x1 105.29464939236641, :y1 309.7321472167969, :x2 526.3569662868977, :y2 332.58929443359375, :width 837, :height 1083.1764705882354}), :page 20}, :content {:text "Dangling pointers, double-frees, and null pointer dereferences are all caught at compile time"}, :properties {:color "yellow"}} {:id #uuid "63cc0068-dbc6-4eeb-8cbe-2e146cc957c3", :page 20, :position {:bounding {:x1 0, :y1 76.57142639160156, :x2 701.4426443874836, :y2 368.4910888671875, :width 837, :height 1083.1764705882354}, :rects ({:x1 0, :y1 76.57142639160156, :x2 0, :y2 99.42857360839844, :width 837, :height 1083.1764705882354} {:x1 537.2624075710773, :y1 309.7321472167969, :x2 701.4426443874836, :y2 332.58929443359375, :width 837, :height 1083.1764705882354} {:x1 105.29464939236641, :y1 345.6339416503906, :x2 690.7944662868977, :y2 368.4910888671875, :width 837, :height 1083.1764705882354}), :page 20}, :content {:text "Array references are secured with a mix of compile-time and run-time checks"}, :properties {:color "yellow"}} {:id #uuid "63cc009f-a300-465b-8ed2-ebc335d8cd0e", :page 20, :position {:bounding {:x1 0, :y1 252.57144165039062, :x2 714.7781088650227, :y2 920.3393249511719, :width 837, :height 1083.1764705882354}, :rects ({:x1 0, :y1 252.57144165039062, :x2 0, :y2 275.4285888671875, :width 837, :height 1083.1764705882354} {:x1 0, :y1 268.5714416503906, :x2 0, :y2 291.4285888671875, :width 837, :height 1083.1764705882354} {:x1 0, :y1 284.5714416503906, :x2 0, :y2 307.4285888671875, :width 837, :height 1083.1764705882354} {:x1 0, :y1 300.57144927978516, :x2 0, :y2 323.42859649658203, :width 837, :height 1083.1764705882354} {:x1 105.29464939236641, :y1 753.8750305175781, :x2 679.4430258572102, :y2 776.732177734375, :width 837, :height 1083.1764705882354} {:x1 105.29464939236641, :y1 789.7768249511719, :x2 699.5731528103352, :y2 812.6339721679688, :width 837, :height 1083.1764705882354} {:x1 105.29464939236641, :y1 825.6786193847656, :x2 672.8098471462727, :y2 848.5357666015625, :width 837, :height 1083.1764705882354} {:x1 105.29464939236641, :y1 861.5804138183594, :x2 714.7781088650227, :y2 884.4375610351562, :width 837, :height 1083.1764705882354} {:x1 105.29464939236641, :y1 897.482177734375, :x2 267.074571877718, :y2 920.3393249511719, :width 837, :height 1083.1764705882354}), :page 20}, :content {:text "In our experience, being able to trust the language to catch more mistakes encourages us to try more ambitious projects. Modifying large, complex programs is less risky when you know that issues of memory management and pointer validity are taken care of"}, :properties {:color "yellow"}} {:id #uuid "63cc00ca-d929-4fd9-8efc-15108c02fcd0", :page 21, :position {:bounding {:x1 0, :y1 108.57144165039062, :x2 693.6496298611164, :y2 525.4286041259766, :width 837, :height 1083.1764705882354}, :rects ({:x1 0, :y1 108.57144165039062, :x2 0, :y2 131.42858123779297, :width 837, :height 1083.1764705882354} {:x1 105.29464939236641, :y1 466.66966247558594, :x2 693.6496298611164, :y2 489.5268096923828, :width 837, :height 1083.1764705882354} {:x1 105.29464939236641, :y1 502.5714569091797, :x2 148.37439182400703, :y2 525.4286041259766, :width 837, :height 1083.1764705882354}), :page 21}, :content {:text "Concurrency is notoriously difficult to use correctly in C and C++"}, :properties {:color "red"}} {:id #uuid "63cc0109-41f2-4b5b-b086-eca4288e7433", :page 21, :position {:bounding {:x1 0, :y1 236.5714111328125, :x2 692.0651572048664, :y2 837.25, :width 837, :height 1083.1764705882354}, :rects ({:x1 0, :y1 236.5714111328125, :x2 0, :y2 259.4285583496094, :width 837, :height 1083.1764705882354} {:x1 105.29464939236641, :y1 778.4910888671875, :x2 692.0651572048664, :y2 801.3482360839844, :width 837, :height 1083.1764705882354} {:x1 105.29464939236641, :y1 814.3928833007812, :x2 194.09817722439766, :y2 837.25, :width 837, :height 1083.1764705882354}), :page 21}, :content {:text "You can share data freely between threads, as long as it isn’t changing"}, :properties {:color "yellow"}} {:id #uuid "63cc0113-93b3-4605-acf7-ed1f6f541759", :page 21, :position {:bounding {:x1 0, :y1 252.5714111328125, :x2 686.5243704617023, :y2 873.1517944335938, :width 837, :height 1083.1764705882354}, :rects ({:x1 0, :y1 252.5714111328125, :x2 0, :y2 275.4285583496094, :width 837, :height 1083.1764705882354} {:x1 206.20295932888985, :y1 814.3928833007812, :x2 686.5243704617023, :y2 837.25, :width 837, :height 1083.1764705882354} {:x1 105.29464939236641, :y1 850.2946472167969, :x2 368.2760947048664, :y2 873.1517944335938, :width 837, :height 1083.1764705882354}), :page 21}, :content {:text "Data that does change can only be accessed using synchronization primitives"}, :properties {:color "yellow"}} {:id #uuid "63cc0123-b092-4e4d-8448-c67227901942", :page 21, :position {:bounding {:x1 -0.0035028941929340363, :y1 268.5714111328125, :x2 837.1094121448696, :y2 2176.0001220703125, :width 837, :height 1083.1764705882354}, :rects ({:x1 0, :y1 268.5714111328125, :x2 0, :y2 291.4285583496094, :width 837, :height 1083.1764705882354} {:x1 0, :y1 287.99998474121094, :x2 837, :y2 287.99998474121094, :width 837, :height 1083.1764705882354} {:x1 452.9750235378742, :y1 850.2891540527344, :x2 681.7550223171711, :y2 873.1463012695312, :width 837, :height 1083.1764705882354} {:x1 -0.0035028941929340363, :y1 880.2177124023438, :x2 837.1094121448696, :y2 1083.1641845703125, :width 837, :height 1083.1764705882354} {:x1 0, :y1 1089.5714721679688, :x2 0, :y2 1112.4285888671875, :width 837, :height 1083.1764705882354} {:x1 0, :y1 1093, :x2 837, :y2 2176.0001220703125, :width 837, :height 1083.1764705882354} {:x1 0, :y1 1093, :x2 837, :y2 1093, :width 837, :height 1083.1764705882354}), :page 21}, :content {:text "traditional concurrency tools are available: mutexes, condition variables, channels, atomics, and so on. Rust simply checks that you’re using them properly"}, :properties {:color "yellow"}} {:id #uuid "63cc01ce-cf06-4535-8db1-c5ca59c9fa05", :page 23, :position {:bounding {:x1 0, :y1 156.57144165039062, :x2 730.4828512966633, :y2 583.8928833007812, :width 837, :height 1083.1764705882354}, :rects ({:x1 0, :y1 156.57144165039062, :x2 0, :y2 179.4285888671875, :width 837, :height 1083.1764705882354} {:x1 0, :y1 172.57144165039062, :x2 0, :y2 195.4285888671875, :width 837, :height 1083.1764705882354} {:x1 170.14221408963203, :y1 489.232177734375, :x2 730.4828512966633, :y2 512.0892944335938, :width 837, :height 1083.1764705882354} {:x1 105.29464939236641, :y1 525.1339721679688, :x2 704.3980429470539, :y2 547.9910888671875, :width 837, :height 1083.1764705882354} {:x1 105.29464939236641, :y1 561.0357666015625, :x2 387.6755087673664, :y2 583.8928833007812, :width 837, :height 1083.1764705882354}), :page 23}, :content {:text "The language is designed with efficient defaults and gives you the ability to control how memory gets used and how the processor’s attention is spent"}, :properties {:color "yellow"}} {:id #uuid "63cc022c-89f0-4dbe-9e28-72d4e0e03d8b", :page 23, :position {:bounding {:x1 0, :y1 268.5714111328125, :x2 713.9485647976398, :y2 944.9553833007812, :width 837, :height 1083.1764705882354}, :rects ({:x1 0, :y1 268.5714111328125, :x2 0, :y2 291.4285583496094, :width 837, :height 1083.1764705882354} {:x1 0, :y1 284.5714111328125, :x2 0, :y2 307.4285583496094, :width 837, :height 1083.1764705882354} {:x1 646.6278860867023, :y1 850.2946472167969, :x2 713.9485647976398, :y2 873.1517944335938, :width 837, :height 1083.1764705882354} {:x1 105.29464939236641, :y1 886.1964416503906, :x2 669.2889731228352, :y2 909.0535888671875, :width 837, :height 1083.1764705882354} {:x1 105.29464939236641, :y1 922.0982360839844, :x2 410.59793308377266, :y2 944.9553833007812, :width 837, :height 1083.1764705882354}), :page 23}, :content {:text "easy to use libraries published by others on Rust’s public package repository, the crates.io website"}, :properties {:color "yellow"}} {:id #uuid "63cc024d-541a-4dd2-ab41-6d5bd661c084", :page 24, :position {:bounding {:x1 0, :y1 140.57143783569336, :x2 724.7082236111164, :y2 547.9910850524902, :width 837, :height 1083.1764705882354}, :rects ({:x1 0, :y1 140.57143783569336, :x2 0, :y2 163.42856979370117, :width 837, :height 1083.1764705882354} {:x1 0, :y1 156.57143783569336, :x2 0, :y2 179.42858505249023, :width 837, :height 1083.1764705882354} {:x1 246.89081028103828, :y1 453.330379486084, :x2 715.0586569607258, :y2 476.18749618530273, :width 837, :height 1083.1764705882354} {:x1 105.29464939236641, :y1 489.23217391967773, :x2 724.7082236111164, :y2 512.0892906188965, :width 837, :height 1083.1764705882354} {:x1 105.29464939236641, :y1 525.1339683532715, :x2 186.01655796170235, :y2 547.9910850524902, :width 837, :height 1083.1764705882354}), :page 24}, :content {:text "Rust’s traits and generics let you create libraries with flexible interfaces so that they can serve in many different contexts"}, :properties {:color "yellow"}} {:id #uuid "63cc0289-aada-48c2-ab0e-5dfe15b62478", :page 25, :position {:bounding {:x1 105.29464939236641, :y1 107.47322082519531, :x2 529.6145346462727, :y2 149.1875, :width 837, :height 1083.1764705882354}, :rects ({:x1 105.29464939236641, :y1 107.47322082519531, :x2 529.6145346462727, :y2 149.1875, :width 837, :height 1083.1764705882354}), :page 25}, :content {:text "Chapter 2. A Tour of Rust"}, :properties {:color "yellow"}} {:id #uuid "63cc02a1-52f1-427c-89c0-f187716d6546", :page 25, :position {:bounding {:x1 0, :y1 188.57143020629883, :x2 702.8764212429523, :y2 696.7232666015625, :width 837, :height 1083.1764705882354}, :rects ({:x1 0, :y1 188.57143020629883, :x2 0, :y2 211.42857360839844, :width 837, :height 1083.1764705882354} {:x1 366.6255057156086, :y1 637.9642944335938, :x2 647.3460257351398, :y2 660.8214416503906, :width 837, :height 1083.1764705882354} {:x1 129.91072300076485, :y1 673.8660888671875, :x2 702.8764212429523, :y2 696.7232666015625, :width 837, :height 1083.1764705882354}), :page 25}, :content {:text "a program that does a simple calculation on its command-line arguments, with unit tests"}, :properties {:color "yellow"}} {:id #uuid "63cc04c6-b190-41ef-88a8-e0fb2bb93831", :page 25, :position {:bounding {:x1 0, :y1 236.5714569091797, :x2 727.8147757351398, :y2 840.3304138183594, :width 837, :height 1083.1764705882354}, :rects ({:x1 0, :y1 236.5714569091797, :x2 0, :y2 259.42859649658203, :width 837, :height 1083.1764705882354} {:x1 0, :y1 252.5714569091797, :x2 0, :y2 275.42859649658203, :width 837, :height 1083.1764705882354} {:x1 472.5619986355305, :y1 745.669677734375, :x2 727.8147757351398, :y2 768.5268249511719, :width 837, :height 1083.1764705882354} {:x1 129.91072300076485, :y1 781.5714721679688, :x2 690.7869437038898, :y2 804.4286193847656, :width 837, :height 1083.1764705882354} {:x1 129.91072300076485, :y1 817.4732666015625, :x2 407.2592642605305, :y2 840.3304138183594, :width 837, :height 1083.1764705882354}), :page 25}, :content {:text "use a third-party library to handle the details of HTTP and introduce string handling, closures, and error handling"}, :properties {:color "yellow"}} {:id #uuid "63cc04cf-21b0-4815-954e-856491a0e29f", :page 25, :position {:bounding {:x1 0, :y1 284.5714569091797, :x2 708.2054617702961, :y2 912.1250610351562, :width 837, :height 1083.1764705882354}, :rects ({:x1 0, :y1 284.5714569091797, :x2 0, :y2 307.4285888671875, :width 837, :height 1083.1764705882354} {:x1 317.18538120388985, :y1 853.3750610351562, :x2 708.2054617702961, :y2 876.232177734375, :width 837, :height 1083.1764705882354} {:x1 129.91072300076485, :y1 889.2679138183594, :x2 580.9210379421711, :y2 912.1250610351562, :width 837, :height 1083.1764705882354}), :page 25}, :content {:text "plots a beautiful fractal, distributing the computation across multiple threads for speed"}, :properties {:color "yellow"}} {:id #uuid "63cc04d7-758c-490e-87c4-319f96569c0f", :page 26, :position {:bounding {:x1 0, :y1 28.571426391601562, :x2 711.1001150906086, :y2 236.16966247558594, :width 837, :height 1083.1764705882354}, :rects ({:x1 0, :y1 28.571426391601562, :x2 0, :y2 51.42857360839844, :width 837, :height 1083.1764705882354} {:x1 301.2197745144367, :y1 177.4107208251953, :x2 711.1001150906086, :y2 200.2678680419922, :width 837, :height 1083.1764705882354} {:x1 129.91072300076485, :y1 213.31251525878906, :x2 424.83284214138985, :y2 236.16966247558594, :width 837, :height 1083.1764705882354}), :page 26}, :content {:text "a robust command-line tool that processes files using regular expressions"}, :properties {:color "yellow"}} {:id #uuid "63cc06e6-8739-4e7a-bfad-9645796eb77a", :page 26, :position {:bounding {:x1 0, :y1 236.5714111328125, :x2 600.2773001492023, :y2 829.0446472167969, :width 837, :height 1083.1764705882354}, :rects ({:x1 0, :y1 236.5714111328125, :x2 0, :y2 259.4285583496094, :width 837, :height 1083.1764705882354} {:x1 105.29464939236641, :y1 770.2857208251953, :x2 600.2773001492023, :y2 793.7142944335938, :width 837, :height 1083.1764705882354} {:x1 105.29464939236641, :y1 806.1875, :x2 584.0100882351398, :y2 829.0446472167969, :width 837, :height 1083.1764705882354}), :page 26}, :content {:text "The best way to install Rust is to use rustup . Go to https://rustup.rs and follow the instructions there"}, :properties {:color "yellow"}} {:id #uuid "63cc06ed-da6e-4c53-b0a5-bc4f79458b90", :page 27, :position {:bounding {:x1 0, :y1 12.5714111328125, :x2 695.3889487087727, :y2 236.74099731445312, :width 837, :height 1083.1764705882354}, :rects ({:x1 0, :y1 12.5714111328125, :x2 0, :y2 35.428558349609375, :width 837, :height 1083.1764705882354} {:x1 0, :y1 28.5714111328125, :x2 0, :y2 51.428558349609375, :width 837, :height 1083.1764705882354} {:x1 477.7487662136555, :y1 141.50894165039062, :x2 692.6385062038898, :y2 164.36605834960938, :width 837, :height 1083.1764705882354} {:x1 105.29464939236641, :y1 177.41073608398438, :x2 695.3889487087727, :y2 200.26785278320312, :width 837, :height 1083.1764705882354} {:x1 105.29464939236641, :y1 213.31246948242188, :x2 336.9375174343586, :y2 236.74099731445312, :width 837, :height 1083.1764705882354}), :page 27}, :content {:text "when a new version of Rust is released, you’ll be able to upgrade with zero clicks by typing rustup update ."}, :properties {:color "yellow"}} {:id #uuid "63cc06f9-8993-46df-ab0b-dd68c2d8b43e", :page 27, :position {:bounding {:x1 101, :y1 362, :x2 729, :y2 580, :width 837, :height 1083.1764705882354}, :rects (), :page 27}, :content {:text "[:span]", :image 1674315512237}, :properties {:color "yellow"}} {:id #uuid "63cc06ff-1845-4fc5-b268-cea143e821ad", :page 27, :position {:bounding {:x1 0, :y1 60.571434020996094, :x2 719.6211722195148, :y2 332.5892868041992, :width 837, :height 1083.1764705882354}, :rects ({:x1 0, :y1 60.571434020996094, :x2 0, :y2 83.4285659790039, :width 837, :height 1083.1764705882354} {:x1 226.11436679959297, :y1 273.8303756713867, :x2 719.6211722195148, :y2 296.6875228881836, :width 837, :height 1083.1764705882354} {:x1 105.29464939236641, :y1 309.73213958740234, :x2 691.9563315212727, :y2 332.5892868041992, :width 837, :height 1083.1764705882354}), :page 27}, :content {:text "once you’ve completed the installation, you should have three new commands available at your command line:"}, :properties {:color "yellow"}} {:id #uuid "63cc0708-d192-4973-8477-7d8c6fd2c372", :page 27, :position {:bounding {:x1 0, :y1 252.5714111328125, :x2 725.5935995876789, :y2 837.25, :width 837, :height 1083.1764705882354}, :rects ({:x1 0, :y1 252.5714111328125, :x2 0, :y2 275.4285583496094, :width 837, :height 1083.1764705882354} {:x1 135.03572300076485, :y1 780.1964416503906, :x2 725.5935995876789, :y2 803.6250152587891, :width 837, :height 1083.1764705882354} {:x1 129.91072300076485, :y1 814.3928680419922, :x2 329.2227042019367, :y2 837.25, :width 837, :height 1083.1764705882354}), :page 27}, :content {:text "cargo is Rust’s compilation manager, package manager, and general-purpose tool"}, :properties {:color "yellow"}} {:id #uuid "63cc070c-0f6e-45de-b7d7-5c47e076ede7", :page 28, :position {:bounding {:x1 0, :y1 -3.428558349609375, :x2 712.6430990993977, :y2 164.3660888671875, :width 837, :height 1083.1764705882354}, :rects ({:x1 0, :y1 -3.428558349609375, :x2 0, :y2 19.4285888671875, :width 837, :height 1083.1764705882354} {:x1 135.03572300076485, :y1 107.31253051757812, :x2 712.6430990993977, :y2 130.7410888671875, :width 837, :height 1083.1764705882354} {:x1 129.91072300076485, :y1 141.50894165039062, :x2 699.4844534695148, :y2 164.3660888671875, :width 837, :height 1083.1764705882354}), :page 28}, :content {:text "rustc is the Rust compiler. Usually we let Cargo invoke the compiler for us, but sometimes it’s useful to run it directly."}, :properties {:color "yellow"}} {:id #uuid "63cc070f-42d2-43f7-9d12-d2453dbb0306", :page 28, :position {:bounding {:x1 135.03572300076485, :y1 179.1160888671875, :x2 520.3155691921711, :y2 202.544677734375, :width 837, :height 1083.1764705882354}, :rects ({:x1 135.03572300076485, :y1 179.1160888671875, :x2 520.3155691921711, :y2 202.544677734375, :width 837, :height 1083.1764705882354}), :page 28}, :content {:text "rustdoc is the Rust documentation tool"}, :properties {:color "yellow"}} {:id #uuid "63cc0719-e0fb-4ec2-96a5-5a1c372c6a9d", :page 28, :position {:bounding {:x1 286.6559012234211, :y1 381.5357360839844, :x2 706.2889578640461, :y2 404.39288330078125, :width 837, :height 1083.1764705882354}, :rects ({:x1 286.6559012234211, :y1 381.5357360839844, :x2 706.2889578640461, :y2 404.39288330078125, :width 837, :height 1083.1764705882354}), :page 28}, :content {:text "Cargo can create a new Rust package for us"}, :properties {:color "yellow"}} {:id #uuid "63cc071e-d82f-4dab-85a1-59955144b427", :page 28, :position {:bounding {:x1 107, :y1 471, :x2 728, :y2 562, :width 837, :height 1083.1764705882354}, :rects (), :page 28}, :content {:text "[:span]", :image 1674315550024}, :properties {:color "yellow"}} {:id #uuid "63cc092d-c4f5-4443-9082-5aa0679d0415", :page 29, :position {:bounding {:x1 0, :y1 -3.4285736083984375, :x2 675.4296438992023, :y2 275.1517791748047, :width 837, :height 1083.1764705882354}, :rects ({:x1 0, :y1 -3.4285736083984375, :x2 0, :y2 19.428573608398438, :width 837, :height 1083.1764705882354} {:x1 262.1214773952961, :y1 216.3928680419922, :x2 675.4296438992023, :y2 239.25001525878906, :width 837, :height 1083.1764705882354} {:x1 105.29464939236641, :y1 252.29466247558594, :x2 348.53413608670235, :y2 275.1517791748047, :width 837, :height 1083.1764705882354}), :page 29}, :content {:text "Cargo has created a file Cargo.toml to hold metadata for the package"}, :properties {:color "yellow"}} {:id #uuid "63cc0959-92f3-431f-9186-c1e269345338", :page 30, :position {:bounding {:x1 0, :y1 -3.4285888671875, :x2 715.9414236843586, :y2 166.64285278320312, :width 837, :height 1083.1764705882354}, :rects ({:x1 0, :y1 -3.4285888671875, :x2 0, :y2 19.428558349609375, :width 837, :height 1083.1764705882354} {:x1 244.50116184353828, :y1 105.60714721679688, :x2 715.9414236843586, :y2 128.46426391601562, :width 837, :height 1083.1764705882354} {:x1 105.29464939236641, :y1 143.21426391601562, :x2 560.1473563015461, :y2 166.64285278320312, :width 837, :height 1083.1764705882354}), :page 30}, :content {:text "You can tell Cargo to skip this step by passing -vcs none to cargo new on the command line."}, :properties {:color "yellow"}} {:id #uuid "63cc0a09-c749-4a13-bf04-6ce3fc3a1784", :page 30, :position {:bounding {:x1 0, :y1 236.5714569091797, :x2 721.0214407742023, :y2 876.2322082519531, :width 837, :height 1083.1764705882354}, :rects ({:x1 0, :y1 236.5714569091797, :x2 0, :y2 259.4285888671875, :width 837, :height 1083.1764705882354} {:x1 182.88907077908516, :y1 817.4732666015625, :x2 721.0214407742023, :y2 840.90185546875, :width 837, :height 1083.1764705882354} {:x1 105.29464939236641, :y1 853.3750610351562, :x2 516.0759604275227, :y2 876.2322082519531, :width 837, :height 1083.1764705882354}), :page 30}, :content {:text "invoke the cargo run command from any directory in the package to build and run our program"}, :properties {:color "yellow"}} {:id #uuid "63cc0a98-5ee9-4c83-89dd-e5578f68cda2", :page 31, :position {:bounding {:x1 0, :y1 -3.4285736083984375, :x2 695.8985159695148, :y2 313.0982208251953, :width 837, :height 1083.1764705882354}, :rects ({:x1 0, :y1 -3.4285736083984375, :x2 0, :y2 19.428558349609375, :width 837, :height 1083.1764705882354} {:x1 164.08819797635078, :y1 254.3392791748047, :x2 695.8985159695148, :y2 277.76783752441406, :width 837, :height 1083.1764705882354} {:x1 105.29464939236641, :y1 290.24107360839844, :x2 407.8503134548664, :y2 313.0982208251953, :width 837, :height 1083.1764705882354}), :page 31}, :content {:text "Cargo has invoked the Rust compiler, rustc , and then run the executable it produced."}, :properties {:color "yellow"}} {:id #uuid "63cc0aab-2224-451b-ac1e-5e64850bef7f", :page 31, :position {:bounding {:x1 0, :y1 12.571434020996094, :x2 712.6652396023273, :y2 349.0000228881836, :width 837, :height 1083.1764705882354}, :rects ({:x1 0, :y1 12.571434020996094, :x2 0, :y2 35.42857360839844, :width 837, :height 1083.1764705882354} {:x1 413.9568045437336, :y1 290.24108123779297, :x2 712.6652396023273, :y2 313.09822845458984, :width 837, :height 1083.1764705882354} {:x1 105.29464939236641, :y1 326.1428756713867, :x2 573.1629813015461, :y2 349.0000228881836, :width 837, :height 1083.1764705882354}), :page 31}, :content {:text "Cargo places the executable in the target subdirectory at the top of the package"}, :properties {:color "yellow"}} {:id #uuid "63cc0ac4-6095-4e68-b284-b23a25e5333b", :page 31, :position {:bounding {:x1 318.51069858670235, :y1 781.5714721679688, :x2 689.1533377468586, :y2 804.4286193847656, :width 837, :height 1083.1764705882354}, :rects ({:x1 318.51069858670235, :y1 781.5714721679688, :x2 689.1533377468586, :y2 804.4286193847656, :width 837, :height 1083.1764705882354}), :page 31}, :content {:text "Cargo can clean up the generated files"}, :properties {:color "yellow"}} {:id #uuid "63cc0ade-5f2b-4e81-9cd0-d42dae81fad5", :page 31, :position {:bounding {:x1 108, :y1 872, :x2 730, :y2 984, :width 837, :height 1083.1764705882354}, :rects (), :page 31}, :content {:text "[:span]", :image 1674316508973}, :properties {:color "yellow"}} {:id #uuid "63cc11ce-a6f8-4ff0-9479-b856da9f5149", :page 33, :position {:bounding {:x1 0, :y1 28.5714111328125, :x2 689.5970633327961, :y2 236.16961669921875, :width 837, :height 1083.1764705882354}, :rects ({:x1 0, :y1 28.5714111328125, :x2 0, :y2 51.42852783203125, :width 837, :height 1083.1764705882354} {:x1 443.0593741238117, :y1 177.41070556640625, :x2 689.5970633327961, :y2 200.267822265625, :width 837, :height 1083.1764705882354} {:x1 105.29464939236641, :y1 213.3125, :x2 291.05024936795235, :y2 236.16961669921875, :width 837, :height 1083.1764705882354}), :page 33}, :content {:text "Four-space indentation is standard Rust style"}, :properties {:color "yellow"}} {:id #uuid "63cc11d8-bfe7-4e57-897c-544136ba3f86", :page 33, :position {:bounding {:x1 227.9821493923664, :y1 311.4285888671875, :x2 509.24275425076485, :y2 334.857177734375, :width 837, :height 1083.1764705882354}, :rects ({:x1 227.9821493923664, :y1 311.4285888671875, :x2 509.24275425076485, :y2 334.857177734375, :width 837, :height 1083.1764705882354}), :page 33}, :content {:text "i32 is a signed 32-bit integer"}, :properties {:color "yellow"}} {:id #uuid "63cc11dd-bb6e-459b-a3aa-683a80ffc0c6", :page 33, :position {:bounding {:x1 0, :y1 76.57144165039062, :x2 723.7049734890461, :y2 368.4910888671875, :width 837, :height 1083.1764705882354}, :rects ({:x1 0, :y1 76.57144165039062, :x2 0, :y2 99.4285888671875, :width 837, :height 1083.1764705882354} {:x1 526.3125174343586, :y1 311.4285888671875, :x2 723.7049734890461, :y2 334.857177734375, :width 837, :height 1083.1764705882354} {:x1 105.29464939236641, :y1 345.63397216796875, :x2 203.25454929471016, :y2 368.4910888671875, :width 837, :height 1083.1764705882354}), :page 33}, :content {:text "u8 is an unsigned 8bit integer"}, :properties {:color "yellow"}} {:id #uuid "63cc11e1-7692-49ca-ab8a-0d40aabddd99", :page 33, :position {:bounding {:x1 217.23985508084297, :y1 345.63397216796875, :x2 431.1452811062336, :y2 368.4910888671875, :width 837, :height 1083.1764705882354}, :rects ({:x1 217.23985508084297, :y1 345.63397216796875, :x2 431.1452811062336, :y2 368.4910888671875, :width 837, :height 1083.1764705882354}), :page 33}, :content {:text "used for “byte” values"}, :properties {:color "yellow"}} {:id #uuid "63cc1212-0fe8-4f3f-91ce-5bd579a33af4", :page 33, :position {:bounding {:x1 0, :y1 92.57144165039062, :x2 706.9997732937336, :y2 406.6607666015625, :width 837, :height 1083.1764705882354}, :rects ({:x1 0, :y1 92.57144165039062, :x2 0, :y2 115.4285888671875, :width 837, :height 1083.1764705882354} {:x1 554.6735403835773, :y1 345.63397216796875, :x2 706.9997732937336, :y2 369.06256103515625, :width 837, :height 1083.1764705882354} {:x1 110.41964939236641, :y1 383.232177734375, :x2 702.0375235378742, :y2 406.6607666015625, :width 837, :height 1083.1764705882354}), :page 33}, :content {:text "The isize and usize types hold pointer-sized signed and unsigned integers"}, :properties {:color "blue"}} {:id #uuid "63cc1221-1d77-4826-a8bd-92eb34d07ee7", :page 33, :position {:bounding {:x1 0, :y1 124.57142639160156, :x2 665.5932333767414, :y2 476.18748474121094, :width 837, :height 1083.1764705882354}, :rects ({:x1 0, :y1 124.57142639160156, :x2 0, :y2 147.42857360839844, :width 837, :height 1083.1764705882354} {:x1 105.29464939236641, :y1 417.43748474121094, :x2 665.5932333767414, :y2 440.29466247558594, :width 837, :height 1083.1764705882354} {:x1 105.29464939236641, :y1 453.3303680419922, :x2 197.57164219021797, :y2 476.18748474121094, :width 837, :height 1083.1764705882354}), :page 33}, :content {:text "32 bits long on 32-bit platforms, and 64 bits long on 64-bit platforms"}, :properties {:color "blue"}} {:id #uuid "63cc1243-aa94-4a9a-8f0b-deb6bd71cd41", :page 33, :position {:bounding {:x1 342.6936209499836, :y1 453.3303909301758, :x2 716.4121268093586, :y2 476.75894927978516, :width 837, :height 1083.1764705882354}, :rects ({:x1 342.6936209499836, :y1 453.3303909301758, :x2 716.4121268093586, :y2 476.75894927978516, :width 837, :height 1083.1764705882354}), :page 33}, :content {:text "two floating-point types, f32 and f64"}, :properties {:color "yellow"}} {:id #uuid "63cc12bf-7242-49a5-81fa-ba4ea7502985", :page 33, :position {:bounding {:x1 0, :y1 188.57144165039062, :x2 663.8471396267414, :y2 644.410774230957, :width 837, :height 1083.1764705882354}, :rects ({:x1 0, :y1 188.57144165039062, :x2 0, :y2 211.42858123779297, :width 837, :height 1083.1764705882354} {:x1 105.29464939236641, :y1 585.6518020629883, :x2 663.8471396267414, :y2 608.5089492797852, :width 837, :height 1083.1764705882354} {:x1 105.29464939236641, :y1 621.553596496582, :x2 186.82574680447578, :y2 644.410774230957, :width 837, :height 1083.1764705882354}), :page 33}, :content {:text "By default, once a variable is initialized, its value can’t be changed"}, :properties {:color "blue"}} {:id #uuid "63cc12c8-280a-4c3c-96da-a88e2bfcf870", :page 33, :position {:bounding {:x1 0, :y1 204.57144165039062, :x2 709.0149100124836, :y2 716.2143020629883, :width 837, :height 1083.1764705882354}, :rects ({:x1 0, :y1 204.57144165039062, :x2 0, :y2 227.42858123779297, :width 837, :height 1083.1764705882354} {:x1 0, :y1 220.57144165039062, :x2 0, :y2 243.42858123779297, :width 837, :height 1083.1764705882354} {:x1 199.05273655056953, :y1 621.553596496582, :x2 696.2364065945148, :y2 644.9821548461914, :width 837, :height 1083.1764705882354} {:x1 105.29464939236641, :y1 657.4553909301758, :x2 709.0149100124836, :y2 680.883918762207, :width 837, :height 1083.1764705882354} {:x1 105.29464939236641, :y1 693.3571853637695, :x2 412.90005710721016, :y2 716.2143020629883, :width 837, :height 1083.1764705882354}), :page 33}, :content {:text "but placing the mut keyword (pronounced “mute,” short for mutable) before the parameters n and m allows our function body to assign to them"}, :properties {:color "blue"}} {:id #uuid "63cc132d-ed0b-4cbd-bfc5-a866403502e5", :page 33, :position {:bounding {:x1 0, :y1 236.5714454650879, :x2 681.8813040554523, :y2 752.1161041259766, :width 837, :height 1083.1764705882354}, :rects ({:x1 0, :y1 236.5714454650879, :x2 0, :y2 259.4285888671875, :width 837, :height 1083.1764705882354} {:x1 425.06147983670235, :y1 693.3571929931641, :x2 681.8813040554523, :y2 716.2143096923828, :width 837, :height 1083.1764705882354} {:x1 105.29464939236641, :y1 729.2589874267578, :x2 304.48909214138985, :y2 752.1161041259766, :width 837, :height 1083.1764705882354}), :page 33}, :content {:text "In practice, most variables don’t get assigned to"}, :properties {:color "yellow"}} {:id #uuid "63cc133a-f438-468d-85e6-4b25adca641a", :page 33, :position {:bounding {:x1 105.29464939236641, :y1 825.6785888671875, :x2 685.5258353054523, :y2 849.1071472167969, :width 837, :height 1083.1764705882354}, :rects ({:x1 105.29464939236641, :y1 825.6785888671875, :x2 685.5258353054523, :y2 849.1071472167969, :width 837, :height 1083.1764705882354}), :page 33}, :content {:text "The function’s body starts with a call to the assert! macro"}, :properties {:color "yellow"}} {:id #uuid "63cc1344-53a7-4168-a113-0488d0271afe", :page 33, :position {:bounding {:x1 0, :y1 300.5714282989502, :x2 726.4413626492023, :y2 920.3392944335938, :width 837, :height 1083.1764705882354}, :rects ({:x1 0, :y1 300.5714282989502, :x2 0, :y2 323.4285717010498, :width 837, :height 1083.1764705882354} {:x1 494.96418979763985, :y1 861.5803833007812, :x2 726.4413626492023, :y2 885.0089721679688, :width 837, :height 1083.1764705882354} {:x1 105.29464939236641, :y1 897.482177734375, :x2 545.9156821072102, :y2 920.3392944335938, :width 837, :height 1083.1764705882354}), :page 33}, :content {:text "The ! character marks this as a macro invocation, not a function call"}, :properties {:color "blue"}} {:id #uuid "63cc1395-bdc8-4f94-9562-dedd54d4efc1", :page 34, :position {:bounding {:x1 0, :y1 -3.428558349609375, :x2 714.9588949978352, :y2 200.26788330078125, :width 837, :height 1083.1764705882354}, :rects ({:x1 0, :y1 -3.428558349609375, :x2 0, :y2 19.4285888671875, :width 837, :height 1083.1764705882354} {:x1 0, :y1 12.571441650390625, :x2 0, :y2 35.4285888671875, :width 837, :height 1083.1764705882354} {:x1 218.96789768338203, :y1 105.60714721679688, :x2 677.1817038357258, :y2 128.46429443359375, :width 837, :height 1083.1764705882354} {:x1 105.29464939236641, :y1 141.50894165039062, :x2 714.9588949978352, :y2 164.3660888671875, :width 837, :height 1083.1764705882354} {:x1 105.29464939236641, :y1 177.41073608398438, :x2 528.0679495632648, :y2 200.26788330078125, :width 837, :height 1083.1764705882354}), :page 34}, :content {:text "it is not, terminates the program with a helpful message including the source location of the failing check; this kind of abrupt termination is called a panic"}, :properties {:color "yellow"}} {:id #uuid "63cc13a8-6c89-4fa2-bbb2-978dccab8113", :page 34, :position {:bounding {:x1 0, :y1 60.571441650390625, :x2 717.5142386257648, :y2 343.8750305175781, :width 837, :height 1083.1764705882354}, :rects ({:x1 0, :y1 60.571441650390625, :x2 0, :y2 83.42857360839844, :width 837, :height 1083.1764705882354} {:x1 0, :y1 76.57144165039062, :x2 0, :y2 99.42857360839844, :width 837, :height 1083.1764705882354} {:x1 660.4114554226398, :y1 249.21429443359375, :x2 717.5142386257648, :y2 272.0714416503906, :width 837, :height 1083.1764705882354} {:x1 105.29464939236641, :y1 285.1160888671875, :x2 709.2737601101398, :y2 308.5446472167969, :width 837, :height 1083.1764705882354} {:x1 105.29464939236641, :y1 321.01788330078125, :x2 505.6661093533039, :y2 343.8750305175781, :width 837, :height 1083.1764705882354}), :page 34}, :content {:text "There is also a debug_assert! macro, whose assertions are skipped when the program is compiled for speed."}, :properties {:color "blue"}} {:id #uuid "63cc13d8-2d4b-440e-a63d-dd5c0e8c44f4", :page 34, :position {:bounding {:x1 0, :y1 124.5714362859726, :x2 716.3767416775227, :y2 512.0893020629883, :width 837, :height 1083.1764705882354}, :rects ({:x1 0, :y1 124.5714362859726, :x2 0, :y2 147.4285796880722, :width 837, :height 1083.1764705882354} {:x1 0, :y1 140.57143783569336, :x2 0, :y2 163.42858123779297, :width 837, :height 1083.1764705882354} {:x1 408.10469272732735, :y1 417.43750762939453, :x2 708.7547171413898, :y2 440.2946548461914, :width 837, :height 1083.1764705882354} {:x1 105.29464939236641, :y1 453.3303909301758, :x2 716.3767416775227, :y2 476.18753814697266, :width 837, :height 1083.1764705882354} {:x1 105.29464939236641, :y1 489.2321548461914, :x2 702.0716879665852, :y2 512.0893020629883, :width 837, :height 1083.1764705882354}), :page 34}, :content {:text "nlike C and C++, Rust does not require parentheses around the conditional expressions, but it does require curly braces around the statements they control"}, :properties {:color "blue"}} {:id #uuid "63cc1725-dc8b-4e8e-ba0b-dde052195b2e", :page 34, :position {:bounding {:x1 179.35600498318672, :y1 765.1607666015625, :x2 669.3848440945148, :y2 788.58935546875, :width 837, :height 1083.1764705882354}, :rects ({:x1 179.35600498318672, :y1 765.1607666015625, :x2 669.3848440945148, :y2 788.58935546875, :width 837, :height 1083.1764705882354}), :page 34}, :content {:text "If we wanted to spell out t ’s type, we could write:"}, :properties {:color "yellow"}} {:id #uuid "63cc1730-b7e1-40e9-929a-1be5b9da0c70", :page 34, :position {:bounding {:x1 0, :y1 188.57142639160156, :x2 698.9301321804523, :y2 644.4107360839844, :width 837, :height 1083.1764705882354}, :rects ({:x1 0, :y1 188.57142639160156, :x2 0, :y2 211.4285659790039, :width 837, :height 1083.1764705882354} {:x1 198.0804159939289, :y1 585.6517944335938, :x2 698.9301321804523, :y2 609.0803833007812, :width 837, :height 1083.1764705882354} {:x1 105.29464939236641, :y1 621.5535888671875, :x2 508.8730185329914, :y2 644.4107360839844, :width 837, :height 1083.1764705882354}), :page 34}, :content {:text "We don’t need to write out t ’s type, as long as Rust can infer it from how the variable is used"}, :properties {:color "yellow"}} {:id #uuid "63cc1758-6f89-4693-b0f4-6b604b90c03e", :page 34, :position {:bounding {:x1 0, :y1 300.57147216796875, :x2 682.9185355007648, :y2 970.5982818603516, :width 837, :height 1083.1764705882354}, :rects ({:x1 0, :y1 300.57147216796875, :x2 0, :y2 323.4286193847656, :width 837, :height 1083.1764705882354} {:x1 105.29464939236641, :y1 911.83935546875, :x2 682.9185355007648, :y2 935.2679290771484, :width 837, :height 1083.1764705882354} {:x1 105.29464939236641, :y1 947.7411499023438, :x2 193.0055868923664, :y2 970.5982818603516, :width 837, :height 1083.1764705882354}), :page 34}, :content {:text "Rust has a return statement, but the gcd function doesn’t need one"}, :properties {:color "yellow"}} {:id #uuid "63cc1761-0e2e-49aa-945c-50d7ddf4e548", :page 34, :position {:bounding {:x1 0, :y1 320.0000305175781, :x2 837, :y2 2176.0000610351562, :width 837, :height 1083.1764705882354}, :rects ({:x1 0, :y1 320.0000305175781, :x2 837, :y2 320.0000305175781, :width 837, :height 1083.1764705882354} {:x1 687.3393118679523, :y1 942.6126480102539, :x2 836.9897024929523, :y2 1083.1662368774414, :width 837, :height 1083.1764705882354} {:x1 205.24157932400703, :y1 947.7376480102539, :x2 724.2721731960773, :y2 970.5947875976562, :width 837, :height 1083.1764705882354} {:x1 0, :y1 1093.0000610351562, :x2 837, :y2 2176.0000610351562, :width 837, :height 1083.1764705882354}), :page 34}, :content {:text "If a function body ends with an expression that is not followed by a semicolon, that’s the function’s return value"}, :properties {:color "blue"}} {:id #uuid "63cc177d-dd0a-4e51-8d2c-c08f628e109c", :page 35, :position {:bounding {:x1 0, :y1 156.57144165039062, :x2 679.4446585476398, :y2 582.8661041259766, :width 837, :height 1083.1764705882354}, :rects ({:x1 0, :y1 156.57144165039062, :x2 0, :y2 179.42858505249023, :width 837, :height 1083.1764705882354} {:x1 110.41964939236641, :y1 525.8125152587891, :x2 679.4446585476398, :y2 549.2411041259766, :width 837, :height 1083.1764705882354} {:x1 105.29464939236641, :y1 560.0089569091797, :x2 295.20906284451485, :y2 582.8661041259766, :width 837, :height 1083.1764705882354}), :page 35}, :content {:text "return statements only for explicit early returns from the midst of a function."}, :properties {:color "yellow"}} {:id #uuid "63cc1787-2ba1-4723-8da9-4506ebb87a05", :page 35, :position {:bounding {:x1 105.29464939236641, :y1 716.9464721679688, :x2 667.1470053493977, :y2 739.8036193847656, :width 837, :height 1083.1764705882354}, :rects ({:x1 105.29464939236641, :y1 716.9464721679688, :x2 667.1470053493977, :y2 739.8036193847656, :width 837, :height 1083.1764705882354}), :page 35}, :content {:text "Rust has simple support for testing built into the language"}, :properties {:color "yellow"}} {:id #uuid "63cc1793-40a4-447a-8b27-3a829e315307", :page 35, :position {:bounding {:x1 109, :y1 843, :x2 731, :y2 1328, :width 837, :height 1083.1764705882354}, :rects (), :page 35}, :content {:text "[:span]", :image 1674319761516}, :properties {:color "yellow"}} {:id #uuid "63cc17a2-a538-4f35-9c71-b4cca01afcd4", :page 36, :position {:bounding {:x1 0, :y1 60.571441650390625, :x2 701.8675101101398, :y2 327.46429443359375, :width 837, :height 1083.1764705882354}, :rects ({:x1 0, :y1 60.571441650390625, :x2 0, :y2 83.4285888671875, :width 837, :height 1083.1764705882354} {:x1 193.94580295681953, :y1 268.70538330078125, :x2 701.8675101101398, :y2 292.13397216796875, :width 837, :height 1083.1764705882354} {:x1 105.29464939236641, :y1 304.607177734375, :x2 495.07827976346016, :y2 327.46429443359375, :width 837, :height 1083.1764705882354}), :page 36}, :content {:text "define a function named test_gcd , which calls gcd and checks that it returns correct values"}, :properties {:color "yellow"}} {:id #uuid "63cc17a9-8310-4414-bec4-f3ed735c7ab4", :page 36, :position {:bounding {:x1 0, :y1 76.57144165039062, :x2 725.2434866726398, :y2 399.25897216796875, :width 837, :height 1083.1764705882354}, :rects ({:x1 0, :y1 76.57144165039062, :x2 0, :y2 99.4285888671875, :width 837, :height 1083.1764705882354} {:x1 0, :y1 92.57144165039062, :x2 0, :y2 115.4285888671875, :width 837, :height 1083.1764705882354} {:x1 545.5804007351398, :y1 304.607177734375, :x2 725.2434866726398, :y2 328.0357666015625, :width 837, :height 1083.1764705882354} {:x1 105.29464939236641, :y1 340.5, :x2 710.7909720242023, :y2 363.9285888671875, :width 837, :height 1083.1764705882354} {:x1 105.29464939236641, :y1 376.40179443359375, :x2 307.5056021511555, :y2 399.25897216796875, :width 837, :height 1083.1764705882354}), :page 36}, :content {:text " #[test] atop the definition marks test_gcd as a test function, to be skipped in normal compilations"}, :properties {:color "yellow"}} {:id #uuid "63cc17b0-52e9-42d2-a77d-456cc56e9880", :page 36, :position {:bounding {:x1 0, :y1 108.57144165039062, :x2 708.4597952663898, :y2 435.73211669921875, :width 837, :height 1083.1764705882354}, :rects ({:x1 0, :y1 108.57144165039062, :x2 0, :y2 131.4285888671875, :width 837, :height 1083.1764705882354} {:x1 357.2047598659992, :y1 376.40179443359375, :x2 708.4597952663898, :y2 399.25897216796875, :width 837, :height 1083.1764705882354} {:x1 105.29464939236641, :y1 412.3035888671875, :x2 621.8939993679523, :y2 435.73211669921875, :width 837, :height 1083.1764705882354}), :page 36}, :content {:text "included and called automatically if we run our program with the cargo test command"}, :properties {:color "yellow"}} {:id #uuid "63cc17c4-daed-4154-aded-601ec6b12958", :page 36, :position {:bounding {:x1 0, :y1 156.57143020629883, :x2 612.7146780788898, :y2 542.8660888671875, :width 837, :height 1083.1764705882354}, :rects ({:x1 0, :y1 156.57143020629883, :x2 0, :y2 179.42857360839844, :width 837, :height 1083.1764705882354} {:x1 452.4911063015461, :y1 485.8035888671875, :x2 612.7146780788898, :y2 509.2321472167969, :width 837, :height 1083.1764705882354} {:x1 105.29464939236641, :y1 520.0089416503906, :x2 570.0515463650227, :y2 542.8660888671875, :width 837, :height 1083.1764705882354}), :page 36}, :content {:text "cargo test will automatically gather them up and run them all."}, :properties {:color "yellow"}} {:id #uuid "63cc17cb-190a-4bfd-88cd-0519fe0ded0b", :page 36, :position {:bounding {:x1 105.29464939236641, :y1 580.5267944335938, :x2 599.3785574734211, :y2 603.9553527832031, :width 837, :height 1083.1764705882354}, :rects ({:x1 105.29464939236641, :y1 580.5267944335938, :x2 599.3785574734211, :y2 603.9553527832031, :width 837, :height 1083.1764705882354}), :page 36}, :content {:text "The #[test] marker is an example of an attribute"}, :properties {:color "yellow"}} {:id #uuid "63cc17d9-7860-42b3-bffa-4372446d196a", :page 36, :position {:bounding {:x1 0, :y1 220.57142639160156, :x2 711.2102835476398, :y2 711.0892944335938, :width 837, :height 1083.1764705882354}, :rects ({:x1 0, :y1 220.57142639160156, :x2 0, :y2 243.4285659790039, :width 837, :height 1083.1764705882354} {:x1 468.0278799831867, :y1 652.3303833007812, :x2 711.2102835476398, :y2 675.1875, :width 837, :height 1083.1764705882354} {:x1 105.29464939236641, :y1 688.2321472167969, :x2 355.90095737576485, :y2 711.0892944335938, :width 837, :height 1083.1764705882354}), :page 36}, :content {:text "ike attributes in C++ and C#, or annotations in Java"}, :properties {:color "yellow"}} {:id #uuid "63cc17fb-f173-4b67-8d7d-f97469ff91b1", :page 37, :position {:bounding {:x1 109, :y1 198, :x2 733, :y2 520, :width 837, :height 1083.1764705882354}, :rects (), :page 37}, :content {:text "[:span]", :image 1674319866247}, :properties {:color "yellow"}} {:id #uuid "63cc1813-fa89-464f-a9a3-38d671d319a2", :page 37, :position {:bounding {:x1 0, :y1 28.571441650390625, :x2 543.8264487087727, :y2 658.9732513427734, :width 837, :height 1083.1764705882354}, :rects ({:x1 0, :y1 28.571441650390625, :x2 0, :y2 51.4285888671875, :width 837, :height 1083.1764705882354} {:x1 105.29464939236641, :y1 561.8661041259766, :x2 543.8264487087727, :y2 603.5803985595703, :width 837, :height 1083.1764705882354} {:x1 105.29464939236641, :y1 617.2589721679688, :x2 296.3217947781086, :y2 658.9732513427734, :width 837, :height 1083.1764705882354}), :page 37}, :content {:text "Handling Command-Line Arguments"}, :properties {:color "yellow"}} {:id #uuid "63cdfafb-b29a-4f3c-aeda-490f39cd6861", :page 32, :position {:bounding {:x1 123.18750762939453, :y1 195.14288330078125, :x2 422.02295684814453, :y2 244.28573608398438, :width 979.1999999999999, :height 1267.1999999999998}, :rects ({:x1 123.18750762939453, :y1 195.14288330078125, :x2 422.02295684814453, :y2 244.28573608398438, :width 979.1999999999999, :height 1267.1999999999998}), :page 32}, :content {:text "Rust Functions"}, :properties {:color "yellow"}} {:id #uuid "63cdfb08-342d-40c0-932c-6d2f361864be", :page 32, :position {:bounding {:x1 0, :y1 44.571441650390625, :x2 799.6772537231445, :y2 491.5, :width 979.1999999999999, :height 1267.1999999999998}, :rects ({:x1 0, :y1 44.571441650390625, :x2 0, :y2 67.42857360839844, :width 979.1999999999999, :height 1267.1999999999998} {:x1 0, :y1 60.571441650390625, :x2 0, :y2 83.42857360839844, :width 979.1999999999999, :height 1267.1999999999998} {:x1 773.2191314697266, :y1 381.21429443359375, :x2 785.9774322509766, :y2 407.5, :width 979.1999999999999, :height 1267.1999999999998} {:x1 123.18750762939453, :y1 423.21429443359375, :x2 799.6772537231445, :y2 449.5, :width 979.1999999999999, :height 1267.1999999999998} {:x1 123.18750762939453, :y1 465.21429443359375, :x2 503.4665069580078, :y2 491.5, :width 979.1999999999999, :height 1267.1999999999998}), :page 32}, :content {:text "a function that computes the greatest common divisor of two integers, using Euclid’s algorithm"}, :properties {:color "yellow"}}], :extra {:page 38}}